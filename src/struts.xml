<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

<struts>
	<constant name="struts.devMode" value="true" />
	<!-- 使用spring来管理struts的Action -->
	<constant name="struts.objectFactory" value="spring"></constant>
	<!-- 在submit使用method必须要加下面这句 -->
	<constant name="struts.enable.DynamicMethodInvocation" value="true" />
	<!--namespace用来指定action的url访问路径 -->
	<!-- 设置上传文件的最大大小10M -->
	<constant name="struts.multipart.maxSize" value="10000000"></constant>
	<constant name="struts.multipart.saveDir" value="/tmp" />
	<!-- 权限管理的拦截器专用package -->
	<package name="authorityCheck" extends="struts-default">
		<interceptors>
			<!-- 在package中配置 注意，login不需要定义此拦截器,定义权限控制拦截器 -->
			<!-- 定义含“权限检查拦截器”的拦截器栈，注意缺省的拦截器栈“defaultStack”要放在前面 -->
			<interceptor name="authority"
				class="com.vino.lecture.interceptor.LoginInterceptor">
			</interceptor>
			<interceptor-stack name="authorityStack">
				<interceptor-ref name="defaultStack"></interceptor-ref>
				<!-- 防止用户未登录进入后台 -->
				<interceptor-ref name="authority"></interceptor-ref>
				<interceptor-ref name="logger"></interceptor-ref>
				<interceptor-ref name="timer"></interceptor-ref>
			</interceptor-stack>
		</interceptors>
		<!--注意此行，设为默认的，一劳永逸 -->
		<default-interceptor-ref name="authorityStack"></default-interceptor-ref>
		<!-- 定义全局处理结果 未登录转到此页 -->
		<global-results>
			<!-- 逻辑名为login的结果，映射到/login.jsp页面 -->
			<result name="login">/login.jsp</result>
			<!-- 无权限进行操作 -->
			<!-- <result name="authorityDeny">/authorityMsg.jsp</result> -->
		</global-results>
	</package>

	<!-- 登录 -->
	<package name="login" extends="struts-default">
		<action name="LoginAction" class="loginAction">
			<result name="success">/home.jsp</result>
			<result name="input">/login.jsp</result>
			<result name="login">/login.jsp</result>
			<!-- defaultStack必须要有，要不然会获取不了表单数据 -->
			<interceptor-ref name="defaultStack"></interceptor-ref>
			<interceptor-ref name="logger" />
			<interceptor-ref name="timer"></interceptor-ref>
		</action>
	</package>


	<package name="action" extends="authorityCheck">
		<!-- 添加了json的result-type和拦截器，这样就可以不用extends json-default -->
		<result-types>
			<result-type name="json" class="org.apache.struts2.json.JSONResult" />
		</result-types>
		<interceptors>
			<interceptor name="json"
				class="org.apache.struts2.json.JSONInterceptor" />
			<interceptor name="loginInterceptor"
				class="com.vino.lecture.interceptor.LoginInterceptor">
			</interceptor>
		</interceptors>
		<!-- class的值与bean的name值对应 -->
		<!-- 预约和取消预约的action采用submit中使用submit方式 -->
		<action name="LectureAction" class="lectureAction">
			<result name="success">/lecture/reserveLecture.jsp</result>
			<result name="login">/login.jsp</result>

		</action>

		<!-- 讲座管理action -->

		<!-- 查询所有讲座 -->
		<action name="QueryAllLectureAction" class="lectureAction"
			method="queryAllLecture">
			<result name="success">/lecture/querylecture.jsp</result>
			<result name="login">/login.jsp</result>

		</action>
		
			<action name="AdminQueryAllLectureAction" class="lectureAction"
			method="queryAllLecture">
			<result name="success">/lecture/admin_queryLecture.jsp</result>
			<result name="login">/login.jsp</result>

		</action>
				<action name="AdminManageAttenceAction" class="lectureAction"
			method="queryAllLecture">
			<result name="success">/lecture/admin_manageAttence.jsp</result>
			<result name="login">/login.jsp</result>

		</action>
		<!-- 查询可预约的讲座 -->
		<action name="QueryAvailableLectureAction" class="lectureAction"
			method="queryAvailableLecture">
			<result name="success">/lecture/reserveLecture.jsp</result>
			<result name="login">/login.jsp</result>

		</action>
		<!-- 查询用户已经预约过的讲座 -->
		<action name="QueryReservedLectureAction" class="lectureAction"
			method="queryReservedLecture">
			<result name="success">/lecture/queryReservedLecture.jsp</result>
			<result name="login">/login.jsp</result>

		</action>
		
			<action name="QueryLectureByIdAction" class="lectureAction"
			method="queryLectureById">
			<result name="success">/lecture/admin_updateLecture.jsp</result>
			<result name="login">/login.jsp</result>

		</action>
		
		<!-- 查询预约清单 -->
		<action name="QueryReserveListAction" class="lectureAction"
			method="queryReserveList">
			<result name="success">/lecture/admin_reserveList.jsp</result>
			<result name="login">/login.jsp</result>

		</action>
		
		<!-- 查询考勤清单 -->
		<action name="QueryAttenceListAction" class="lectureAction"
			method="queryAttenceList">
			<result name="success">/lecture/admin_attenceList.jsp</result>
			<result name="login">/login.jsp</result>

		</action>

		<action name="AddLectureAction" class="lectureAction" method="addLecture">
			<result name="success">/lecture/admin_addLecture.jsp</result>
			<result name="login">/login.jsp</result>
			<result name="input">/lecture/admin_addLecture.jsp</result>

		</action>

		<action name="UpdateLectureAction" class="lectureAction"
			method="updateLecture">
			<result name="success">/lectureManage.jsp</result>
			<result name="login">/login.jsp</result>

		</action>

		<action name="DeleteLectureAction" class="lectureAction"
			method="deleteLecture">
			<result name="success">/lectureManage.jsp</result>
			<result name="login">/login.jsp</result>

		</action>

		<!-- 用户管理action -->
		<action name="AddUserAction" class="userAction" method="addUser">
			<result name="success">/userManage.jsp</result>
			<result name="input">/login.jsp</result>

		</action>
		<action name="UpdateUserAction" class="userAction" method="updateUser">
			<result name="success">/userManage.jsp</result>
			<result name="input">/login.jsp</result>

		</action>
		<action name="DeleteUserAction" class="userAction" method="deleteUser">
			<result name="success">/userManage.jsp</result>
			<result name="input">/login.jsp</result>

		</action>
		<action name="QueryAllUserAction" class="userAction" method="queryAllUser">
			<result name="success">/queryUser.jsp</result>
			<result name="input">/login.jsp</result>

		</action>
		<action name="PageQueryUserAction" class="userAction" method="pageQueryUser">
			<result name="success">/queryUser.jsp</result>
			<result name="input">/login.jsp</result>

		</action>
		<action name="DownloadAction" class="downloadAction">
			<!-- 指定文件的下载路径，默认是webroot为根目录 -->
			<param name="inputPath">/WEB-INF/download/export.xls</param>
			<result name="success" type="stream">
				<param name="contentType">application/x-excel</param>
				<param name="inputName">targetFile</param>
				<param name="contentDisposition">attachment;filename=test.xls</param>
			</result>
		</action>
		<!-- 创建excel并转发到download action -->
		<action name="ExportReserveListAction" class="downloadAction" method="exportReserveListExcel">
			<result name="success" type="chain">DownloadAction</result>
		</action>
		
		<!-- 创建excel并转发到download action -->
		<action name="ExportAttenceListAction" class="downloadAction" method="exportAttenceListExcel">
			<result name="success" type="chain">DownloadAction</result>
		</action>
	</package>


	<!-- 上传文件 -->
	<package name="upload" extends="authorityCheck" namespace="/upload">
	
	<result-types>
			<result-type name="json" class="org.apache.struts2.json.JSONResult" />
		</result-types>
		<interceptors>
			<interceptor name="json"
				class="org.apache.struts2.json.JSONInterceptor" />		
		</interceptors>
		
		
		<action name="AttenceFileUploadAction" class="fileUploadAction">
			<param name="uploadDir">/WEB-INF/upload/</param>
			<result name="success" type="chain">ImportAttenceListAction</result>
			<result name="input">/login.jsp</result>
		</action>
		<action name="ImportAttenceListAction" class="fileUploadAction" method="importAttenceListExcel">			
			<result name="success" type="json">
			<param name="root">resultMap</param> 
			</result>
			<result name="input">/login.jsp</result>
		</action>
	</package>



	<!-- 通过创建一个新的包继承json-default实现权限不足跳页 -->
	<package name="ajax" extends="json-default" namespace="/ajax">

		<interceptors>
			<interceptor name="loginInterceptor"
				class="com.vino.lecture.interceptor.LoginInterceptor">
			</interceptor>
			<interceptor-stack name="myStack">
				<interceptor-ref name="defaultStack"></interceptor-ref>
				<!-- 防止用户未登录进入后台 -->
				<interceptor-ref name="loginInterceptor"></interceptor-ref>
				<interceptor-ref name="logger"></interceptor-ref>
				<interceptor-ref name="timer"></interceptor-ref>
			</interceptor-stack>
		</interceptors>


		<global-results>
			<result name="login">/login.jsp</result>
		</global-results>
		
		
		<!-- 预约和取消预约的action采用submit中使用submit方式 -->
		<action name="AjaxReserveLecture" class="lectureAction" method="reserveLecture">
			<result name="success" type="json">
				<param name="root">resultMap</param> 
			</result>
			<interceptor-ref name="myStack"></interceptor-ref>

		</action>

		<action name="AjaxCancelReserveLecture" class="lectureAction"
			method="cancelReserveLecture">
			<result name="success" type="json">
				<param name="root">resultMap</param> 
			</result>
			<interceptor-ref name="myStack"></interceptor-ref>

		</action>

		<!-- 讲座管理action -->

		<!-- 查询所有讲座 -->
		<action name="AjaxQueryAllLecture" class="lectureAction"
			method="queryAllLecture">
			<result name="success" type="json">
				<param name="root">pageBean</param>
			</result>

		</action>
		<!-- 查询可预约的讲座 -->
		<action name="AjaxQueryAvailableLecture" class="lectureAction"
			method="queryAvailableLecture">
			<result name="success" type="json">
				<param name="root">pageBean</param>
			</result>

		</action>
		<!-- 查询用户已经预约过的讲座 -->
		<action name="AjaxQueryReservedLecture" class="lectureAction"
			method="queryReservedLecture">
			<result name="success" type="json">
				<param name="root">pageBean</param>

			</result>

		</action>
		
			<action name="AjaxQueryReserveList" class="lectureAction"
			method="queryReserveList">
			<result name="success" type="json">
				<param name="root">pageBean</param>
			</result>

		</action>
		
		<action name="AjaxAddLectureAction" class="lectureAction" method="addLecture">
			<result name="success" type="json">
				<param name="root">resultMap</param> 
			</result>
			<interceptor-ref name="myStack"></interceptor-ref>


		</action>

		<action name="AjaxUpdateLectureAction" class="lectureAction"
			method="updateLecture">
			<result name="success" type="json">
				<param name="root">resultMap</param> 
			</result>
			<interceptor-ref name="myStack"></interceptor-ref>


		</action>

		<action name="AjaxDeleteLectureAction" class="lectureAction"
			method="deleteLecture">
		<result name="success" type="json">
				<param name="root">resultMap</param> 
			</result>
			<interceptor-ref name="myStack"></interceptor-ref>


		</action>
	</package>
</struts>